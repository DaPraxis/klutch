{"version":3,"sources":["./src/app/services/firebase.service.ts"],"names":[],"mappings":"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","file":"default~pages-displayimage-displayimage-module~pages-displaytext-displaytext-module~pages-entityanal~6c8b4e18-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { LoadingController } from '@ionic/angular';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { AngularFireStorage, AngularFireUploadTask, AngularFireStorageReference } from 'angularfire2/storage';\nimport { AngularFirestore} from 'angularfire2/firestore';\nimport { Storage } from '@ionic/storage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirebaseService {\n\n  task: AngularFireUploadTask;\n  ref: AngularFireStorageReference;\n  imageText: string;\n  dataField: string;\n  data: string;\n  docID: number;\n  unsub: any;\n  ip: string = \"100.65.108.71\";\n\n  constructor(private http: HttpClient,\n              private router: Router,\n              private storage: Storage,\n              private fireStorage: AngularFireStorage, \n              private db: AngularFirestore, \n              private loadingCtrl: LoadingController) {}\n  \n  showLoader(msg) {\n    let loading = this.loadingCtrl.create({\n      message: msg,\n      spinner: 'circles',\n      cssClass: 'loader'\n    }).then(res => {\n      res.present();\n    })\n  }\n\n  hideLoader() {\n    this.loadingCtrl.dismiss();\n  }\n\n  /**\n   * 1. Checks DB if \"patients\" collection already exists.\n   *    If not, create a new collection and set current \n   *    docID to 0.\n   * 2. Else, retrieve, the ID of the last doc in the collection\n   *    and set current docID to lastID + 1.\n   * 3. Save this ID into local storage.\n   */\n  initializeDB() {\n    const docRef = this.db.collection('patients').get()\n      .subscribe(collection => {\n        var length = collection.docs.length;\n        if (length == 0) {\n          console.log(\"Collection doesn't exist! Creating a new one...\")\n          this.docID = 0;\n          this.storage.set('currentID', this.docID);\n        }\n        else {\n          console.log(\"Collection has docs\");\n          \n          // create a listener to query\n          this.unsub = collection.query.orderBy(\"patientID\")\n            .limitToLast(1)\n              .onSnapshot(res => {\n                this.docID = Number(res.docs[0].id.slice(7)) + 1;\n                console.log(\"docID initialize: \", this.docID);\n                this.storage.set('currentID', this.docID);\n              });\n        }  \n      })\n  }\n\n  async uploadImageToDB(url, id) {\n    console.log(\"id: \", id);\n\n    const docID = `patient${id}`;\n    const docRef = this.db.collection('patients').doc(docID);\n    const patientID = id;\n    const imageUrl = url;\n    const imageText = \"\";\n    const entity = [];\n    await docRef.set({ patientID, imageUrl, imageText, entity})\n      .then(res => {\n        this.hideLoader();\n        console.log(\"data uploaded to database\");\n        this.router.navigateByUrl(`displayimage`);\n      }); \n  }\n\n  /**\n   * This function does the following:\n   * 1. Creates a new document in Firebase database.\n   * 2. Uploads image to Firebase storage and retrieves the download URL.\n   * 3. Saves image URL into the newly created document in DB.\n   * 4. Navigates to the displayimage page as the final step.\n   * \n   * @param {String} base64 Image representation as a base-64 encoded string.\n   */\n  async uploadImage(base64, docID) {\n\n    let loadingMsg = \"Uploading your image. Please wait.\"\n    this.showLoader(loadingMsg);\n    \n    const id = this.db.createId();\n    // upload to storage\n    const path = `${id}.jpg`;\n    this.ref = this.fireStorage.ref(path);\n    this.task = this.ref.putString(base64, 'data_url');\n    \n    // get download URL\n    this.task.snapshotChanges().pipe(\n      finalize(() => {\n        this.ref.getDownloadURL().subscribe(url => {\n          console.log(\"download url:\", url); \n\n          this.uploadImageToDB(url, docID);\n        });\n      })\n    ).subscribe();\n\n    // unsubscribe from query listener\n    this.unsub();\n  }\n\n  /**\n   * Retrieves the corresponding image document in DB and updates\n   * the imageText field with the analyzed text.\n   * \n   * @param {String} imageText Analyzed text returned from the Google Vision API.\n   */\n  async uploadImageData(dataType, data, id) {\n    const docID = `patient${id}`;\n    const patientRef = this.db.collection('patients').doc(docID);\n\n    if (dataType == 'TEXT') {\n      patientRef.update({ imageText: data} );\n    }\n    else if (dataType == 'ENTITY') {\n      patientRef.update({ entity: data} );\n    }\n\n  }\n\n  /**\n   * This function does the following:\n   * 1. Submits HTTP POST request to call the Google Vision API in \n   * backend to perform document text detection.\n   * 2. Uploads the retrieved analyzed text to DB.\n   * 3. Navigates to displaytext page as the final step.\n   * \n   * @param {String} imageUrl Download URL for the image.\n   */\n  recognizeImage(imageUrl, docID) {\n    let loadingMsg = \"Analyzing your image. Please wait.\"\n    this.showLoader(loadingMsg);\n\n    let header = { \"Content-Type\": \"application/json\"};\n    let data = {\n      id: 1,\n      image: imageUrl\n    };\n    let serverUrl = `https://klucth-app.herokuapp.com/vision`\n    this.http.post(serverUrl, data, {headers: header, responseType: 'text'})\n      .subscribe(response => {\n        this.imageText = response;\n        console.log(\"http response: \", this.imageText);\n        this.uploadImageData('TEXT', this.imageText, docID)\n          .then(res => {\n              this.hideLoader();\n              this.router.navigateByUrl(`displaytext`);\n            });\n      });\n  }\n\n  /**\n   * Retrieves selected data from Firebase DB.\n   * \n   * @param {String} dataType Either the image itself or the analyzed text.\n   */\n  async retrieveData(dataType, id) {\n    if (dataType == \"IMAGE\")\n    {\n      this.dataField = \"imageUrl\";\n    }\n    else if (dataType == \"TEXT\")\n    {\n      this.dataField = \"imageText\";\n    }\n    else if (dataType = \"ENTITY\")\n    {\n      this.dataField = \"entity\";\n    }\n\n    // retrieve the last text pushed to the database\n    const docID = `patient${id}`;\n    console.log(\"docID:\", docID);\n    const patientRef = this.db.collection('patients').doc(docID);\n    let getDoc = await patientRef.get()\n      .toPromise()\n        .then(doc => {\n          if (!doc.exists) {\n            console.log('No such document!');\n          } else {\n            console.log(\"data field: \", this.dataField);\n            this.data = doc.get(this.dataField);\n            console.log('Document text:', this.data);\n          }\n      });\n    console.log(\"Text after: \", this.data);\n    return this.data;\n  }\n}\n"],"sourceRoot":""}